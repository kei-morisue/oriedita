package oriedita.editor.swing.dialog.settings;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import oriedita.editor.databinding.HotkeyModel;
import oriedita.editor.service.HotkeyService;
import oriedita.editor.swing.dialog.SelectKeyStrokeDialog;
import oriedita.editor.tools.KeyStrokeUtil;
import oriedita.editor.tools.ResourceUtil;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;

public class HotkeySettingsPanel extends JPanel {
    private JPanel root;
    private JTable table1;

    private static class HotkeysTableModel extends DefaultTableModel {
        public HotkeysTableModel(Object[] columnNames, int rowCount) {
            super(columnNames, rowCount);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    }

    public HotkeySettingsPanel(JFrame owner, HotkeyService hotkeyService, HotkeyModel hotkeyModel) {
        DefaultTableModel tableModel = new HotkeysTableModel(new String[]{"Action", "Hotkey"}, 0);
        $$$setupUI$$$();

        Map<String, Integer> rowMap = new HashMap<>();

        int i = 0;
        for (Map.Entry<String, KeyStroke> entry : hotkeyModel.getAll().entrySet()) {
            String name = ResourceUtil.getBundleString("name", entry.getKey());

            KeyStroke keyStroke = entry.getValue();

            rowMap.put(entry.getKey(), i++);

            tableModel.addRow(new String[]{entry.getKey(), KeyStrokeUtil.toString(keyStroke), ""});
        }

        hotkeyModel.addPropertyChangeListener(e -> {
            if (e.getPropertyName() != null) {
                tableModel.setValueAt(KeyStrokeUtil.toString((KeyStroke) e.getNewValue()), rowMap.get(e.getPropertyName()), 1);
            }
        });

        table1.setModel(tableModel);

        table1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    System.out.println("changing: " + tableModel.getValueAt(table1.getSelectedRow(), 0));
                    String key = (String) tableModel.getValueAt(table1.getSelectedRow(), 0);
                    KeyStroke keyStroke = hotkeyModel.getHotkey(key);

                    SelectKeyStrokeDialog dialog = new SelectKeyStrokeDialog(owner, key, hotkeyModel, keyStroke, newKeyStroke -> {
                        if (newKeyStroke != null && hotkeyModel.getKey(newKeyStroke) != null && !Objects.equals(hotkeyModel.getKey(newKeyStroke), key)) {

                            String conflictingButton = (String) owner.getRootPane()
                                    .getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW)
                                    .get(newKeyStroke);
                            JOptionPane.showMessageDialog(owner, "Conflicting KeyStroke! Conflicting with " + conflictingButton);
                            return false;
                        }

                        hotkeyModel.setHotkey(key, newKeyStroke);

                        return true;
                    });

                    dialog.showDialog();
                }

            }
        });
    }

    private void createUIComponents() {
        root = this;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.setMaximumSize(new Dimension(2147483647, 500));
        final JSeparator separator1 = new JSeparator();
        root.add(separator1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, Font.BOLD, -1, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setText("Hotkeys");
        root.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        root.add(scrollPane1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        table1.setAutoCreateRowSorter(true);
        scrollPane1.setViewportView(table1);
        final JLabel label2 = new JLabel();
        label2.setText("You  can also right click a button to set a hotkey.");
        root.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
