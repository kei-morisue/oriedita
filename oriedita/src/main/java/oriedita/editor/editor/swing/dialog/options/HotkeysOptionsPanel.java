package oriedita.editor.swing.dialog.options;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import oriedita.tools.KeyStrokeUtil;
import oriedita.tools.ResourceUtil;
import oriedita.tools.StringOp;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ResourceBundle;

public class HotkeysOptionsPanel extends JPanel {
    private JPanel root;
    private JTable table1;

    public HotkeysOptionsPanel() {
        DefaultTableModel tableModel = new DefaultTableModel(new String[]{"Action", "Hotkey"}, 0);
        $$$setupUI$$$();

        ResourceBundle hotkeysBundle = ResourceUtil.getDefaultBundle("hotkey");

        for (String key : hotkeysBundle.keySet()) {
            String name = ResourceUtil.getBundleString("name", key);
            String string = hotkeysBundle.getString(key);

            KeyStroke keyStroke = StringOp.isEmpty(string) ? null : KeyStroke.getKeyStroke(string);

            tableModel.addRow(new String[]{(name == null || name.equals("")) ? key : name, KeyStrokeUtil.toString(keyStroke), ""});
        }

        table1.setModel(tableModel);

        table1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                System.out.println("changing: " + tableModel.getValueAt(table1.getSelectedRow(), 0));
                // TODO: Select new keystroke here and update the view.
            }
        });
    }

    private void createUIComponents() {
        root = this;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        root.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        root.setMaximumSize(new Dimension(2147483647, 500));
        final JSeparator separator1 = new JSeparator();
        root.add(separator1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Hotkeys");
        root.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        root.add(scrollPane1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table1 = new JTable();
        table1.setAutoCreateRowSorter(true);
        scrollPane1.setViewportView(table1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
